\begin{Verbatim}[commandchars=\\\{\}]
import math
import os
import sys
import textwrap
import argparse


class ArgumentParser(argparse.ArgumentParser):
    def \PYGZus{}\PYGZus{}init\PYGZus{}\PYGZus{}(self, *args, **kwargs):
        super(ArgumentParser, self).\PYGZus{}\PYGZus{}init\PYGZus{}\PYGZus{}(*args, **kwargs)
        self.program = \PYGZob{}key: kwargs[key] for key in kwargs \PYGZcb{}
        self.options = []

    def add\PYGZus{}argument(self, *args, **kwargs):
        super(ArgumentParser, self).add\PYGZus{}argument(*args, **kwargs)
        option = \PYGZob{}\PYGZcb{}
        option[\PYGZdq{}flags\PYGZdq{}] = [item for item in args]
        for key in kwargs:
            option[key] = kwargs[key]
        self.options.append(option)

    def print\PYGZus{}help(self):
        wrapper = textwrap.TextWrapper(width=100)
        if \PYGZdq{}usage\PYGZdq{} in self.program:
            print(\PYGZdq{}Usage: \PYGZpc{}s\PYGZdq{} \PYGZpc{} self.program[\PYGZdq{}usage\PYGZdq{}])
        else:
            usage = []
            for option in self.options:
                usage += [\PYGZdq{}[\PYGZpc{}s \PYGZpc{}s]\PYGZdq{} \PYGZpc{} (item, option[\PYGZdq{}metavar\PYGZdq{}])
                            if \PYGZdq{}metavar\PYGZdq{} in option
                            else \PYGZdq{}[\PYGZpc{}s \PYGZpc{}s]\PYGZdq{} \PYGZpc{} (item, option[\PYGZdq{}dest\PYGZdq{}].upper())
                                 if \PYGZdq{}dest\PYGZdq{} in option
                                 else \PYGZdq{} [\PYGZpc{}s]\PYGZdq{} \PYGZpc{} item for item in option[\PYGZdq{}flags\PYGZdq{}]]
            wrapper.initial\PYGZus{}indent = \PYGZdq{}Usage: \PYGZpc{}s\PYGZdq{} \PYGZpc{} os.path.basename(sys.argv[0])
            wrapper.subsequent\PYGZus{}indent = len(wrapper.initial\PYGZus{}indent) * \PYGZdq{} \PYGZdq{}
            output = str.join(\PYGZdq{} \PYGZdq{}, usage)
            output = wrapper.fill(output)
            print(output)
        print()

        if \PYGZdq{}description\PYGZdq{} in self.program:
            print(self.program[\PYGZdq{}description\PYGZdq{}])
            print()

        print(\PYGZdq{}Аргументы:\PYGZdq{})
        maxlen = 0
        for option in self.options:
            option[\PYGZdq{}flags2\PYGZdq{}] = str.join(\PYGZdq{}, \PYGZdq{}, [\PYGZdq{} \PYGZpc{}s \PYGZpc{}s\PYGZdq{} \PYGZpc{} (item, option[\PYGZdq{}metavar\PYGZdq{}])
                                                if \PYGZdq{}metavar\PYGZdq{} in option
                                                else \PYGZdq{}\PYGZpc{}s \PYGZpc{}s\PYGZdq{} \PYGZpc{} (item, option[\PYGZdq{}dest\PYGZdq{}].upper())
                                                     if \PYGZdq{}dest\PYGZdq{} in option
                                                     else item for item in option[\PYGZdq{}flags\PYGZdq{}] ])
            if len(option[\PYGZdq{}flags2\PYGZdq{}]) \PYGZgt{} maxlen:
                maxlen = len(option[\PYGZdq{}flags2\PYGZdq{}])
        for option in self.options:
            template = \PYGZdq{}  \PYGZpc{}\PYGZhy{}\PYGZdq{} + str(maxlen) + \PYGZdq{}s  \PYGZdq{}
            wrapper.initial\PYGZus{}indent = template \PYGZpc{} option[\PYGZdq{}flags2\PYGZdq{}]
            wrapper.subsequent\PYGZus{}indent = len(wrapper.initial\PYGZus{}indent) * \PYGZdq{} \PYGZdq{}
            if \PYGZdq{}help\PYGZdq{} in option and \PYGZdq{}default\PYGZdq{} in option:
                output = option[\PYGZdq{}help\PYGZdq{}]
                output += \PYGZdq{} (по умолчанию: \PYGZsq{}\PYGZpc{}s\PYGZsq{})\PYGZdq{} \PYGZpc{} option[\PYGZdq{}default\PYGZdq{}] if isinstance(option[\PYGZdq{}default\PYGZdq{}], str) else \PYGZdq{} (по умолчанию: \PYGZpc{}s)\PYGZdq{} \PYGZpc{} str(option[\PYGZdq{}default\PYGZdq{}])
                output = wrapper.fill(output)
            elif \PYGZdq{}help\PYGZdq{} in option:
                output = option[\PYGZdq{}help\PYGZdq{}]
                output = wrapper.fill(output)
            elif \PYGZdq{}default\PYGZdq{} in option:
                output = \PYGZdq{}По умолчанию: \PYGZsq{}\PYGZpc{}s\PYGZsq{}\PYGZdq{} \PYGZpc{} option[\PYGZdq{}default\PYGZdq{}] if isinstance(option[\PYGZdq{}default\PYGZdq{}], str) else \PYGZdq{}Default: \PYGZpc{}s\PYGZdq{} \PYGZpc{} str(option[\PYGZdq{}default\PYGZdq{}])
                output = wrapper.fill(output)
            else:
                output = wrapper.initial\PYGZus{}indent
            print(output)


def standard\PYGZus{}uniform\PYGZus{}distribution\PYGZus{}with\PYGZus{}interval(seq, m, a, b):
    return [b * (elem / m) + a for elem in seq]


def triangle\PYGZus{}distribution(seq, m, a, b):
    new\PYGZus{}seq = []
    for i in range(0, len(seq) \PYGZhy{} 1, 2):
        new\PYGZus{}seq.append(a + b * ((seq[i] / m) + (seq[i + 1] / m) \PYGZhy{} 1))
    return new\PYGZus{}seq


def general\PYGZus{}exponential\PYGZus{}distribution(seq, m, a, b):
    return [\PYGZhy{}b * math.log(elem / m) + a for elem in seq]


def normal\PYGZus{}distribution(seq, m, a, b):
    new\PYGZus{}seq = []
    for i in range(0, len(seq) \PYGZhy{} 1, 2):
        new\PYGZus{}seq.append(a + b *
                           math.sqrt(\PYGZhy{}2 * math.log(1 \PYGZhy{} (seq[i] / m))) *
                           math.cos(2 * math.pi * (seq[i + 1] / m)))
        new\PYGZus{}seq.append(a + b *
                           math.sqrt(\PYGZhy{}2 * math.log(1 \PYGZhy{} (seq[i] / m))) *
                           math.sin(2 * math.pi * (seq[i + 1] / m)))
    return new\PYGZus{}seq


def gamma\PYGZus{}distribution(seq, m, a, b, c):
    new\PYGZus{}seq = []
    for i in range(0, len(seq), c):
        mult\PYGZus{}values = 1
        for j in range(c):
            mult\PYGZus{}values *= 1 \PYGZhy{} (seq[i + j] / m) 
        new\PYGZus{}seq.append(a \PYGZhy{} b * math.log(mult\PYGZus{}values))
    return new\PYGZus{}seq


def lognormal\PYGZus{}distribution(seq, m, a, b):
    norm\PYGZus{}seq = normal\PYGZus{}distribution(seq, m, a, b)
    return [a + math.exp(b \PYGZhy{} elem) for elem in norm\PYGZus{}seq]


def logistic\PYGZus{}distribution(seq, m, a, b):
    return [a + b * math.log((elem / m) / (1 \PYGZhy{} elem / m)) for elem in seq]


def binom\PYGZus{}coef(n, k):
    if k \PYGZgt{} n:
        return 0
    if not k or n == k:
        return 1
    return binom\PYGZus{}coef(n \PYGZhy{} 1, k \PYGZhy{} 1) + binom\PYGZus{}coef(n \PYGZhy{} 1, k)


def binomial\PYGZus{}distribution(seq, m, a, b):
    new\PYGZus{}seq = []
    for i in range(len(seq)):
        u = seq[i] / m
        s = 0
        k = 0
        while True:
            s += binom\PYGZus{}coef(b, k) * pow(a, k) * pow(1 \PYGZhy{} a, b \PYGZhy{} k)
            if s \PYGZgt{} u:
                new\PYGZus{}seq.append(k)
                break
            if k \PYGZlt{} (b \PYGZhy{} 1):
                k += 1
                continue
            new\PYGZus{}seq.append(b)
    return new\PYGZus{}seq


METHOD\PYGZus{}NAME\PYGZus{}TO\PYGZus{}FUNC = \PYGZob{}\PYGZdq{}st\PYGZdq{}: standard\PYGZus{}uniform\PYGZus{}distribution\PYGZus{}with\PYGZus{}interval,
                       \PYGZdq{}tr\PYGZdq{}: triangle\PYGZus{}distribution,
                       \PYGZdq{}ex\PYGZdq{}: general\PYGZus{}exponential\PYGZus{}distribution,
                       \PYGZdq{}nr\PYGZdq{}: normal\PYGZus{}distribution,
                       \PYGZdq{}ln\PYGZdq{}: lognormal\PYGZus{}distribution,
                       \PYGZdq{}ls\PYGZdq{}: logistic\PYGZus{}distribution,
                       \PYGZdq{}bi\PYGZdq{}: binomial\PYGZus{}distribution\PYGZcb{}


def main(args):
    \PYGZsh{} получение числовой последовательности из файла
    file\PYGZus{}name = args.fn
    with open(file\PYGZus{}name) as f:
        lines = f.readlines()
    file\PYGZus{}content = \PYGZdq{}\PYGZdq{}.join(lines)
    num\PYGZus{}seq\PYGZus{}str = file\PYGZus{}content.split(\PYGZdq{},\PYGZdq{})
    num\PYGZus{}seq = [int(num) for num in num\PYGZus{}seq\PYGZus{}str if len(num)]
    
    \PYGZsh{} получение максимального элемента последовательности
    max\PYGZus{}elem = max(num\PYGZus{}seq)
    m = max\PYGZus{}elem + 1
    method\PYGZus{}name = args.dist

    \PYGZsh{} преобразование к заданному распределению
    if method\PYGZus{}name != \PYGZdq{}gm\PYGZdq{}:
        processed\PYGZus{}seq = METHOD\PYGZus{}NAME\PYGZus{}TO\PYGZus{}FUNC[method\PYGZus{}name](num\PYGZus{}seq, m,
                                                         args.p1, args.p2)
    else:
        processed\PYGZus{}seq = gamma\PYGZus{}distribution(num\PYGZus{}seq, m, args.p1, args.p2,
                                           args.p3)
    
    f = open(f\PYGZdq{}distr\PYGZhy{}\PYGZob{}method\PYGZus{}name\PYGZcb{}.dat\PYGZdq{}, \PYGZdq{}w\PYGZdq{})
    f.write(\PYGZdq{},\PYGZdq{}.join([str(elem) for elem in processed\PYGZus{}seq]))
    f.close()


if \PYGZus{}\PYGZus{}name\PYGZus{}\PYGZus{} == \PYGZdq{}\PYGZus{}\PYGZus{}main\PYGZus{}\PYGZus{}\PYGZdq{}:
    parser = ArgumentParser(description=\PYGZdq{}Программа приводит последовательность чисел из входного файла к заданному распределению.\PYGZdq{}, argument\PYGZus{}default=argparse.SUPPRESS, allow\PYGZus{}abbrev=False, add\PYGZus{}help=False)
    parser.add\PYGZus{}argument(\PYGZdq{}\PYGZhy{}f\PYGZdq{}, \PYGZdq{}\PYGZhy{}\PYGZhy{}fn\PYGZdq{}, type=str, help=\PYGZdq{}имя файла с входной последовательностью\PYGZdq{})
    parser.add\PYGZus{}argument(\PYGZdq{}\PYGZhy{}d\PYGZdq{}, \PYGZdq{}\PYGZhy{}\PYGZhy{}dist\PYGZdq{}, type=str, help=\PYGZdq{}код распределения для преобразования последовательности (st, tr, ex, nr, gm, ln, ls, bi)\PYGZdq{})
    parser.add\PYGZus{}argument(\PYGZdq{}\PYGZhy{}p1\PYGZdq{}, \PYGZdq{}\PYGZhy{}a\PYGZdq{}, type=float, help=\PYGZdq{}1\PYGZhy{}й параметр для генерации ПСЧ заданного распределения\PYGZdq{})
    parser.add\PYGZus{}argument(\PYGZdq{}\PYGZhy{}p2\PYGZdq{}, \PYGZdq{}\PYGZhy{}b\PYGZdq{}, type=int, help=\PYGZdq{}2\PYGZhy{}й параметр для генерации ПСЧ заданного распределения\PYGZdq{})
    parser.add\PYGZus{}argument(\PYGZdq{}\PYGZhy{}p3\PYGZdq{}, \PYGZdq{}\PYGZhy{}c\PYGZdq{}, type=int, default=None, help=\PYGZdq{}3\PYGZhy{}й параметр для генерации ПСЧ гамма\PYGZhy{}распределением\PYGZdq{})
    parser.add\PYGZus{}argument(\PYGZdq{}\PYGZhy{}h\PYGZdq{}, \PYGZdq{}\PYGZhy{}\PYGZhy{}help\PYGZdq{}, action=\PYGZdq{}help\PYGZdq{}, help=\PYGZdq{}выводит текст помощи\PYGZdq{})
    args = parser.parse\PYGZus{}args()
    main(args)
\end{Verbatim}
